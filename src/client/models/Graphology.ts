/* tslint:disable */
/* eslint-disable */
/**
 * Situation API
 * Information System Knowledges
 *
 * The version of the OpenAPI document: 0.15.2 (0.15.2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GraphologyLink } from './GraphologyLink';
import {
    GraphologyLinkFromJSON,
    GraphologyLinkFromJSONTyped,
    GraphologyLinkToJSON,
} from './GraphologyLink';
import type { GraphologyNode } from './GraphologyNode';
import {
    GraphologyNodeFromJSON,
    GraphologyNodeFromJSONTyped,
    GraphologyNodeToJSON,
} from './GraphologyNode';

/**
 * 
 * @export
 * @interface Graphology
 */
export interface Graphology {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Graphology
     */
    attributes: { [key: string]: any; };
    /**
     * 
     * @type {Array<GraphologyLink>}
     * @memberof Graphology
     */
    edges: Array<GraphologyLink>;
    /**
     * 
     * @type {Array<GraphologyNode>}
     * @memberof Graphology
     */
    nodes: Array<GraphologyNode>;
}

/**
 * Check if a given object implements the Graphology interface.
 */
export function instanceOfGraphology(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "attributes" in value;
    isInstance = isInstance && "edges" in value;
    isInstance = isInstance && "nodes" in value;

    return isInstance;
}

export function GraphologyFromJSON(json: any): Graphology {
    return GraphologyFromJSONTyped(json, false);
}

export function GraphologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Graphology {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributes': json['attributes'],
        'edges': ((json['edges'] as Array<any>).map(GraphologyLinkFromJSON)),
        'nodes': ((json['nodes'] as Array<any>).map(GraphologyNodeFromJSON)),
    };
}

export function GraphologyToJSON(value?: Graphology | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributes': value.attributes,
        'edges': ((value.edges as Array<any>).map(GraphologyLinkToJSON)),
        'nodes': ((value.nodes as Array<any>).map(GraphologyNodeToJSON)),
    };
}

