/* tslint:disable */
/* eslint-disable */
/**
 * Situation API
 * Information System Knowledges
 *
 * The version of the OpenAPI document: 0.15.2 (0.15.2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Position } from './Position';
import {
    PositionFromJSON,
    PositionFromJSONTyped,
    PositionToJSON,
} from './Position';

/**
 * There is a problem when the serializer field
 * name clashes with other attributes/methods/keywords
 * See https://github.com/encode/django-rest-framework/issues/967#issuecomment-409998604 # noqa: E501
 * @export
 * @interface ReactFlowNode
 */
export interface ReactFlowNode {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ReactFlowNode
     */
    data: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ReactFlowNode
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReactFlowNode
     */
    parentNode: string;
    /**
     * 
     * @type {Position}
     * @memberof ReactFlowNode
     */
    position: Position;
    /**
     * 
     * @type {string}
     * @memberof ReactFlowNode
     */
    type: string;
}

/**
 * Check if a given object implements the ReactFlowNode interface.
 */
export function instanceOfReactFlowNode(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "parentNode" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ReactFlowNodeFromJSON(json: any): ReactFlowNode {
    return ReactFlowNodeFromJSONTyped(json, false);
}

export function ReactFlowNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReactFlowNode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': json['data'],
        'id': json['id'],
        'parentNode': json['parentNode'],
        'position': PositionFromJSON(json['position']),
        'type': json['type'],
    };
}

export function ReactFlowNodeToJSON(value?: ReactFlowNode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data,
        'id': value.id,
        'parentNode': value.parentNode,
        'position': PositionToJSON(value.position),
        'type': value.type,
    };
}

