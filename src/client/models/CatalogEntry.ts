/* tslint:disable */
/* eslint-disable */
/**
 * Situation API
 * Information System Knowledges
 *
 * The version of the OpenAPI document: 0.15.2 (0.15.2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TypesEnum } from './TypesEnum';
import {
    TypesEnumFromJSON,
    TypesEnumFromJSONTyped,
    TypesEnumToJSON,
} from './TypesEnum';

/**
 * 
 * @export
 * @interface CatalogEntry
 */
export interface CatalogEntry {
    /**
     * 
     * @type {Array<any>}
     * @memberof CatalogEntry
     */
    examples: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof CatalogEntry
     */
    name: string;
    /**
     * 
     * @type {Array<TypesEnum>}
     * @memberof CatalogEntry
     */
    types: Array<TypesEnum>;
}

/**
 * Check if a given object implements the CatalogEntry interface.
 */
export function instanceOfCatalogEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "examples" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "types" in value;

    return isInstance;
}

export function CatalogEntryFromJSON(json: any): CatalogEntry {
    return CatalogEntryFromJSONTyped(json, false);
}

export function CatalogEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'examples': json['examples'],
        'name': json['name'],
        'types': ((json['types'] as Array<any>).map(TypesEnumFromJSON)),
    };
}

export function CatalogEntryToJSON(value?: CatalogEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'examples': value.examples,
        'name': value.name,
        'types': ((value.types as Array<any>).map(TypesEnumToJSON)),
    };
}

