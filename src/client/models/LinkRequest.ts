/* tslint:disable */
/* eslint-disable */
/**
 * Situation API
 * Information System Knowledges
 *
 * The version of the OpenAPI document: 0.15.2 (0.15.2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MetadataShortRequest } from './MetadataShortRequest';
import {
    MetadataShortRequestFromJSON,
    MetadataShortRequestFromJSONTyped,
    MetadataShortRequestToJSON,
} from './MetadataShortRequest';

/**
 * This serializer activates the tracking of
 * serialized objects.
 * It adds the `_represented` (not to use), the `represented`
 * and `reset` methods.
 * Important: it overrides the `to_representation` common method
 * of `Serializer` objects.
 * @export
 * @interface LinkRequest
 */
export interface LinkRequest {
    /**
     * 
     * @type {number}
     * @memberof LinkRequest
     */
    child: number;
    /**
     * 
     * @type {Array<MetadataShortRequest>}
     * @memberof LinkRequest
     */
    metadata?: Array<MetadataShortRequest>;
    /**
     * 
     * @type {number}
     * @memberof LinkRequest
     */
    parent: number;
}

/**
 * Check if a given object implements the LinkRequest interface.
 */
export function instanceOfLinkRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "child" in value;
    isInstance = isInstance && "parent" in value;

    return isInstance;
}

export function LinkRequestFromJSON(json: any): LinkRequest {
    return LinkRequestFromJSONTyped(json, false);
}

export function LinkRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'child': json['child'],
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(MetadataShortRequestFromJSON)),
        'parent': json['parent'],
    };
}

export function LinkRequestToJSON(value?: LinkRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'child': value.child,
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(MetadataShortRequestToJSON)),
        'parent': value.parent,
    };
}

