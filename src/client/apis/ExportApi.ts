/* tslint:disable */
/* eslint-disable */
/**
 * Situation API
 * Information System Knowledges
 *
 * The version of the OpenAPI document: 0.15.2 (0.15.2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Cytoscape,
  Graphology,
  ReactFlow,
} from '../models';
import {
    CytoscapeFromJSON,
    CytoscapeToJSON,
    GraphologyFromJSON,
    GraphologyToJSON,
    ReactFlowFromJSON,
    ReactFlowToJSON,
} from '../models';

/**
 * 
 */
export class ExportApi extends runtime.BaseAPI {

    /**
     * Cytoscape export
     */
    async exportCytoscapeListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Cytoscape>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // orgAPIKeyAuth authentication
        }

        const response = await this.request({
            path: `/export/cytoscape/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CytoscapeFromJSON));
    }

    /**
     * Cytoscape export
     */
    async exportCytoscapeList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Cytoscape>> {
        const response = await this.exportCytoscapeListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Graphology export
     */
    async exportGraphologyRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Graphology>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // orgAPIKeyAuth authentication
        }

        const response = await this.request({
            path: `/export/graphology/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraphologyFromJSON(jsonValue));
    }

    /**
     * Graphology export
     */
    async exportGraphologyRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Graphology> {
        const response = await this.exportGraphologyRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * ReactFlow export
     */
    async exportReactFlowRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactFlow>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // orgAPIKeyAuth authentication
        }

        const response = await this.request({
            path: `/export/react_flow/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactFlowFromJSON(jsonValue));
    }

    /**
     * ReactFlow export
     */
    async exportReactFlowRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactFlow> {
        const response = await this.exportReactFlowRetrieveRaw(initOverrides);
        return await response.value();
    }

}
